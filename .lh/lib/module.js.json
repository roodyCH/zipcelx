{
    "sourceFile": "lib/module.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1673877257983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1673877257983,
            "name": "Commit-0",
            "content": "import escape from 'lodash.escape'\nimport JSZip from 'jszip'\nimport FileSaver from 'file-saver'\nconst CELL_TYPE_STRING = 'string',\n\tCELL_TYPE_NUMBER = 'number',\n\tvalidTypes = ['string', 'number'],\n\tMISSING_KEY_FILENAME = 'Zipclex config missing property filename',\n\tINVALID_TYPE_FILENAME = 'Zipclex filename can only be of type string',\n\tINVALID_TYPE_SHEET = 'Zipcelx sheet data is not of type array',\n\tINVALID_TYPE_SHEET_DATA = 'Zipclex sheet data childs is not of type array',\n\tWARNING_INVALID_TYPE = 'Invalid type supplied in cell config, falling back to \"string\"',\n\tchildValidator = (e) => e.every((e) => Array.isArray(e))\nvar validator = (e) =>\n\te.filename\n\t\t? 'string' != typeof e.filename\n\t\t\t? (console.error(INVALID_TYPE_FILENAME), !1)\n\t\t\t: Array.isArray(e.sheet.data)\n\t\t\t? !!childValidator(e.sheet.data) || (console.error(INVALID_TYPE_SHEET_DATA), !1)\n\t\t\t: (console.error(INVALID_TYPE_SHEET), !1)\n\t\t: (console.error(MISSING_KEY_FILENAME), !1)\nconst generateColumnLetter = (e) => {\n\tif ('number' != typeof e) return ''\n\tconst o = Math.floor(e / 26),\n\t\tt = String.fromCharCode(97 + (e % 26)).toUpperCase()\n\treturn 0 === o ? t : generateColumnLetter(o - 1) + t\n}\nvar generatorCellNumber = (e, o) => `${generateColumnLetter(e)}${o}`,\n\tgeneratorStringCell = (e, o, t) => `<c r=\"${generatorCellNumber(e, t)}\" t=\"inlineStr\"><is><t>${escape(o)}</t></is></c>`,\n\tgeneratorNumberCell = (e, o, t) => `<c r=\"${generatorCellNumber(e, t)}\"><v>${o}</v></c>`,\n\tformatCell = (e, o, t) => (\n\t\t-1 === validTypes.indexOf(e.type) && (console.warn(WARNING_INVALID_TYPE), (e.type = 'string')),\n\t\t'string' === e.type ? generatorStringCell(o, e.value, t) : generatorNumberCell(o, e.value, t)\n\t),\n\tformatRow = (e, o) => {\n\t\tconst t = o + 1,\n\t\t\ts = e.map((e, o) => formatCell(e, o, t)).join('')\n\t\treturn `<row r=\"${t}\">${s}</row>`\n\t},\n\tgeneratorRows = (e) => e.map((e, o) => formatRow(e, o)).join(''),\n\tworkbookXML =\n\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mx=\"http://schemas.microsoft.com/office/mac/excel/2008/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:mv=\"urn:schemas-microsoft-com:mac:vml\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:xm=\"http://schemas.microsoft.com/office/excel/2006/main\"><workbookPr/><sheets><sheet state=\"visible\" name=\"Sheet1\" sheetId=\"1\" r:id=\"rId3\"/></sheets><definedNames/><calcPr/></workbook>',\n\tworkbookXMLRels =\n\t\t'<?xml version=\"1.0\" ?>\\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\\n<Relationship Id=\"rId3\" Target=\"worksheets/sheet1.xml\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\"/>\\n</Relationships>',\n\trels =\n\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>',\n\tcontentTypes =\n\t\t'<?xml version=\"1.0\" ?>\\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\\n<Default ContentType=\"application/xml\" Extension=\"xml\"/>\\n<Default ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" Extension=\"rels\"/>\\n<Override ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" PartName=\"/xl/worksheets/sheet1.xml\"/>\\n<Override ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" PartName=\"/xl/workbook.xml\"/>\\n</Types>',\n\ttemplateSheet =\n\t\t'<?xml version=\"1.0\" ?>\\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:mv=\"urn:schemas-microsoft-com:mac:vml\" xmlns:mx=\"http://schemas.microsoft.com/office/mac/excel/2008/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:xm=\"http://schemas.microsoft.com/office/excel/2006/main\"><sheetData>{placeholder}</sheetData></worksheet>'\nconst generateXMLWorksheet = (e) => {\n\tconst o = generatorRows(e)\n\treturn templateSheet.replace('{placeholder}', o)\n}\nvar zipcelx = (e) => {\n\tif (!validator(e)) throw new Error('Validation failed.')\n\tconst o = new JSZip(),\n\t\tt = o.folder('xl')\n\tt.file('workbook.xml', workbookXML),\n\t\tt.file('_rels/workbook.xml.rels', workbookXMLRels),\n\t\to.file('_rels/.rels', rels),\n\t\to.file('[Content_Types].xml', contentTypes)\n\tconst s = generateXMLWorksheet(e.sheet.data)\n\treturn (\n\t\tt.file('worksheets/sheet1.xml', s),\n\t\to\n\t\t\t.generateAsync({\n\t\t\t\ttype: 'blob',\n\t\t\t\tmimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t\t\t})\n\t\t\t.then((o) => {\n\t\t\t\tif (window.flutter_inappwebview) {\n\t\t\t\t\tvar reader = new FileReader()\n\t\t\t\t\tconsole.log('webview detected')\n\n\t\t\t\t\treader.readAsDataURL(o)\n\t\t\t\t\treader.onloadend = function () {\n\t\t\t\t\t\tvar dataUrl = reader.result\n\t\t\t\t\t\tvar base64 = dataUrl.split(',')[1]\n\n\t\t\t\t\t\twindow.flutter_inappwebview.callHandler('blobToBase64Handler', base64.toString(), 'xlsx', e.filename)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('saving with filesaver')\n\t\t\t\t\tFileSaver.saveAs(o, `${e.filename}.xlsx`)\n\t\t\t\t}\n\t\t\t})\n\t)\n}\nexport default zipcelx\nexport { generateXMLWorksheet }\n"
        }
    ]
}